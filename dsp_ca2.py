# -*- coding: utf-8 -*-
"""DSP CA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ijSrp_mgSHzFoyrLLXm1tMwncB9iznbD

##Symmetric
"""

import subprocess
# OpenSSL command to encrypt the file
# encrypt.py
# openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1000 -salt -in message.txt -out encrypt.enc
command = [
    "openssl", "enc", "-aes-256-cbc", "-md", "sha512", "-pbkdf2", "-iter", "1000", "-salt", "-in", "temp.txt", "-out", "encrypt_1.enc", "-k", "your_password"
]

try:
    # Run the OpenSSL command
    subprocess.run(command, check=True)
    print("File encrypted and saved to 'encrypt.enc'.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during encryption: {e}")

# decrypt.py
import subprocess
# OpenSSL command to decrypt the file

# openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1000 -salt -in encrypt.enc -out decrypt.txt -d
command = [
    "openssl", "enc", "-aes-256-cbc", "-md", "sha512", "-pbkdf2", "-iter", "1000", "-d", "-in", "encrypt_1.enc", "-out", "decrypt_1.txt", "-k", "your_password"
]

try:
    # Run the OpenSSL command
    subprocess.run(command, check=True)
    print("File decrypted and saved to 'decrypt.txt'.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during decryption: {e}")

"""## Asymmetric - RSA"""

# encrypt.py
import subprocess

# OpenSSL command to encrypt using the public key
# openssl pkeyutl -encrypt -in message.txt -pubin -inkey mypublic.key -out encrypt.enc
command = [
    "openssl", "pkeyutl", "-encrypt", "-in", "message.txt", "-pubin", "-inkey", "mypublic.key", "-out", "encrypt.enc"
]

try:
    # Run the OpenSSL command to encrypt the file
    subprocess.run(command, check=True)
    print("File encrypted and saved to 'encrypt.enc'.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during encryption: {e}")

# decrypt.py
import subprocess

# OpenSSL command to decrypt using the private key
# openssl pkeyutl -decrypt -in encrypt.enc -inkey myprivate.key -out decrypt.txt
command = [
    "openssl", "pkeyutl", "-decrypt", "-in", "encrypt.enc", "-inkey", "myprivate.key", "-out", "decrypt.txt"
]

try:
    # Run the OpenSSL command to decrypt the file
    subprocess.run(command, check=True)
    print("File decrypted and saved to 'decrypt.txt'.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during decryption: {e}")

# generate keys.py
import subprocess
# Command to generate a private key with AES-256-CBC encryption
# openssl genrsa -aes-256-cbc -out myprivate.key
generate_private_key = [
    "openssl", "genrsa", "-aes-256-cbc", "-out", "myprivate.key"
]

# Command to generate a public key from the private key
# openssl rsa -in myprivate.key -pubout > mypublic.keys
generate_public_key = [
    "openssl", "rsa", "-in", "myprivate.key", "-pubout", "-out", "mypublic.key"
]

try:
    # Run the command to generate the private key
    subprocess.run(generate_private_key, check=True)
    print("Private key saved as 'myprivate.key'.")

    # Run the command to generate the public key
    subprocess.run(generate_public_key, check=True)
    print("Public key saved as 'mypublic.key'.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during key generation: {e}")

"""##  Signature"""

# sign.py
import subprocess
# Step 1: Generate a digital signature using the private key
command = [
    "openssl", "dgst", "-sha256", "-sign", "myprivate.key", "-out", "signature.bin", "message.txt"
]

try:
    # Run the OpenSSL command to generate the signature
    subprocess.run(command, check=True)
    print("Digital signature generated and saved as 'signature.bin'.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during signature generation: {e}")

# verify.py
import subprocess
# Step 2: Verify the digital signature using the public key
command = [
    "openssl", "dgst", "-sha256", "-verify", "mypublic.key", "-signature", "signature.bin", "message.txt"
]

try:
    # Run the OpenSSL command to verify the signature
    subprocess.run(command, check=True)
    print("Signature verification successful.")
except subprocess.CalledProcessError as e:
    print(f"Signature verification failed: {e}")
"""##Message Digest"""
import subprocess

# Command to generate a SHA-256 message digest for verification
verify_digest = [
    "openssl", "dgst", "-sha256", "message.txt"
]

try:
    # Run the command to verify the digest
    result = subprocess.run(verify_digest, check=True, capture_output=True, text=True)
    print(f"Generated digest: {result.stdout}")
except subprocess.CalledProcessError as e:
    print(f"An error occurred during digest verification: {e}")



import subprocess

def compute_sha256_digest(file_path):
    # Define the command
    command = ["openssl", "dgst", "-sha256", file_path]

    try:
        # Run the command and capture the output
        result = subprocess.run(command, capture_output=True, text=True, check=True)

        # Print the output
        print("\n\n\n")
        print(result.stdout.strip().split("= ")[-1])
    except subprocess.CalledProcessError as e:
        print("An error occurred:", e.stderr)

# Usage
file_path = "message.txt"  # Make sure this file exists in your working directory
compute_sha256_digest(file_path)

"""##Certificates"""



"""## Client"""

import socket
import subprocess

def send_file():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('127.0.0.1', 65431))
    # with open("temp.txt", "w") as f:
    #         f.write(data)
    # Run OpenSSL command to encrypt message.txt into encrypt.enc
    command = [
        "openssl", "pkeyutl", "-encrypt", "-in", "message.txt",
        "-pubin", "-inkey", "mypublic.key", "-out", "encrypt.enc"
    ]
    subprocess.run(command, check=True)

    # Send the encrypted file content (encrypt.enc)
    with open("encrypt.enc", 'rb') as file:
        chunk = file.read(1024)
        while chunk:
            client_socket.sendall(chunk)
            chunk = file.read(1024)

    # Send an end-of-file marker to indicate the end of transmission
    client_socket.sendall(b'END')

    # Receive the server's confirmation
    data = client_socket.recv(1024)
    print(f"Received from server: {data.decode('utf-8')}")

    client_socket.close()

if __name__ == "__main__":
    send_file()

"""## Server"""

import socket
import subprocess

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('127.0.0.1', 65431))
    server_socket.listen()

    print("Server is listening on port 65431...")

    conn, addr = server_socket.accept()
    print(f"Connected by {addr}")

    # Open a file to store the received content (received_file.enc)
    with open("received_file.enc", 'wb') as file:
        while True:
            data = conn.recv(1024)
            if data == b'END':  # Check for the end-of-file marker
                break
            if not data:
                break  # No more data, break out of the loop
            file.write(data)  # Write data to file in chunks

    print("File received and saved as 'received_file.enc'")

    # Send a confirmation message to the client
    conn.sendall(b"File received successfully")

    # Decrypt the received file (received_file.enc) into decrypt.txt
    command = [
        "openssl", "pkeyutl", "-decrypt", "-in", "received_file.enc",
        "-inkey", "myprivate.key", "-out", "decrypt.txt"
    ]
    subprocess.run(command, check=True)
    # with open("decrypt.txt", "r") as dec_file:
    #         decrypted_data = dec_file.read().strip()
    print("File decrypted and saved as 'decrypt.txt'")

    conn.close()

if __name__ == "__main__":
    start_server()

import subprocess

# generate privake key
private_key = [
    'openssl', 'genrsa', '-out', 'myprivate.key'
]

# generate public key
public_key = [
    'openssl', 'rsa', '-in', 'myprivate.key', '-pubout', '-out', 'mypublic.key'
]

subprocess.run(private_key, check=True)
subprocess.run(public_key, check=True)

openssl req -x509 -key myprivate.key -sha256 -days 365 -out test_1.cer

openssl x509 -in test_1.cer -pubkey -noout -out key_x509.key

import subprocess

command = [
    'openssl', 'x509', '-in', 'test_1.cer', '-pubkey', '-noout', '-out', 'key.key'
]

subprocess.run(command, check=True)
